{
	"info": {
		"_postman_id": "8a6d0a43-619f-4e4b-85d4-02660bc4a91c",
		"name": "Cities-Supermarket",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16818530"
	},
	"item": [
		{
			"name": "Create city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"city_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Quito\",\n    \"pais\": \"Ecuador\",\n    \"numeroHabitantes\": 10000000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/cities",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create supermarket 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"supermarket_id_1\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Oxxo Bogotá\",\n    \"longitud\": 10000000,\n    \"latitud\": 10000000,\n    \"paginaWeb\": \"www.prueba.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/supermarkets",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create supermarket 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"supermarket_id_2\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Oxxo Medellín\",\n    \"longitud\": 20000000,\n    \"latitud\": 20000000,\n    \"paginaWeb\": \"www.pruebamed.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/supermarkets",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a Supermarket to a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets/{{supermarket_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add an invalid Supermarket to a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets/{{random_uuid}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{random_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a supermarket of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets/{{supermarket_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a supermarket not associated to an city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The supermarket with the given id is not associated to the city\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all supermarkets of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update supermarkets of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{supermarket_id_1}}\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update invalid supermarkets of an city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{random_uuid}}\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a supermarket of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets/{{supermarket_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a supermarket not associated to the city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The supermarket with the given id is not associated to the city\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_2}}"
					]
				}
			},
			"response": []
		}
	]
}